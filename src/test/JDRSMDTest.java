///////////////////////////////////////////////////////////////////////////////
//
// JTOpen (IBM Toolbox for Java - OSS version)
//
// Filename:  JDRSMDTest.java
//
// The source code contained herein is licensed under the IBM Public License
// Version 1.0, which has been approved by the Open Source Initiative.
// Copyright (C) 1997-2023 International Business Machines Corporation and
// others.  All rights reserved.
//
///////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
//
//
//
//
//
////////////////////////////////////////////////////////////////////////
//
// File Name:    JDRSTest.java
//
// Classes:      JDRSTest
//
////////////////////////////////////////////////////////////////////////


package test;

import java.io.IOException;
import java.sql.Connection;
import java.sql.Statement;

import com.ibm.as400.access.AS400;
import com.ibm.as400.access.AS400SecurityException;
import com.ibm.as400.access.Job;



/**
Test driver for the JDBC ResultSetMetaData class.
**/
public class JDRSMDTest
extends JDTestDriver
{



    // Constants.
    public static  String COLLECTION                 = "JDTESTRSMD";

    public static  String RSMDTEST_GET               = COLLECTION + ".RSMD_GET";
    public static  String RSMDTEST_GET2		     = COLLECTION + ".RSMD_GET2"; //$E2
    public static  String RSMDTEST_GET_BIG_PRECISION = COLLECTION + ".RSMD_GBP";

    // Private data.
    private Connection  connection_;
    private Statement   statement_;



    /**
    Run the test as an application.  This should be called
    from the test driver's main().
    
    @param  args        The command line arguments.
    
    @exception Exception If an exception occurs.
    **/
    public static void main (String args[])
    throws Exception
    {
        runApplication (new JDRSMDTest (args));
    }



    /**
    Constructs an object for applets.
    
    @exception Exception If an exception occurs.
    **/
    public JDRSMDTest ()
    throws Exception
    {
        super();
    }



    /**
    Constructs an object for testing applications.
    
    @param      args        The command line arguments.
    
    @exception Exception If an exception occurs.
    **/
    public JDRSMDTest (String[] args)
    throws Exception
    {
        super (args);
    }



    /**
    Performs setup needed before running testcases.
    
    @exception Exception If an exception occurs.
    **/
    public void setup ()
    throws Exception
    {
        super.setup();    // @D1A

	if (connection_ != null) connection_.close();
        // Initialization.
        connection_ = getConnection (getBaseURL (),
                                     systemObject_.getUserId (), encryptedPassword_);

        if(testLib_ != null)
        {    // @E1A
            COLLECTION = testLib_;
            RSMDTEST_GET         = COLLECTION + ".RSMD_GET";
	    RSMDTEST_GET2	 = COLLECTION + ".RSMD_GET2"; //$E2
            RSMDTEST_GET_BIG_PRECISION = COLLECTION + ".RSMD_GBP";

	}
        JDSetupCollection.create (systemObject_, 
                                  connection_, COLLECTION);

        
        statement_ = connection_.createStatement ();

        // Create a distinct type.
        if(areLobsSupported ())
        {
            /* WITH COMPARISONS added for LUW */ 
            safeExecuteUpdate (statement_, "CREATE DISTINCT TYPE "
                               + COLLECTION + ".MONEY AS NUMERIC(10,2) WITH COMPARISONS");
        }

        // Setup RSTEST_GET table.
        StringBuffer buffer = new StringBuffer ();
        buffer.append (" (C_KEY VARCHAR(20)");
        buffer.append (",C_SMALLINT        SMALLINT      ");
        buffer.append (",C_INTEGER         INTEGER       ");
        buffer.append ("GENERATED by default AS IDENTITY  "); //@pda
        buffer.append (",C_REAL            REAL          ");
        buffer.append (",C_FLOAT           FLOAT         ");
        buffer.append (",C_FLOAT_3         FLOAT(3)      ");
        buffer.append (",C_DOUBLE          DOUBLE        ");
        buffer.append (",C_DECIMAL_50      DECIMAL(5,0)  ");
        buffer.append (",C_DECIMAL_105     DECIMAL(10,5) ");
        buffer.append (",C_NUMERIC_50      NUMERIC(5,0)  ");
        buffer.append (",C_NUMERIC_105     NUMERIC(10,5) ");
        buffer.append (",C_CHAR_1          CHAR          ");
        buffer.append (",C_CHAR_50         CHAR(50)      ");
        buffer.append (",C_VARCHAR_50      VARCHAR(50)   ");
        buffer.append (",C_BINARY_1        CHAR FOR BIT DATA        ");
        buffer.append (",C_BINARY_20       CHAR(20)  FOR BIT DATA   ");
        buffer.append (",C_VARBINARY_20    VARCHAR(20) FOR BIT DATA ");
        buffer.append (",C_DATE            DATE          ");
        buffer.append (",C_TIME            TIME          ");
        buffer.append (",C_TIMESTAMP       TIMESTAMP     ");
        if(areLobsSupported ())
        {
            buffer.append (",C_BLOB         BLOB      ");
            buffer.append (",C_CLOB         CLOB      ");
            buffer.append (",C_DBCLOB       DBCLOB    ");
	}

	if (areDatalinksSupported()) { 
            buffer.append (",C_DATALINK     DATALINK(200)      ");
	}
        if(areLobsSupported ())
        {
            buffer.append (",C_DISTINCT     " + COLLECTION + ".MONEY ");
	}
        if(areBigintsSupported())    // @B0A
            buffer.append(",C_BIGINT BIGINT");    // @B0A
	if (areDecfloatsSupported ()) { 
            buffer.append(",C_DECFLOAT16 DECFLOAT(16)");
            buffer.append(",C_DECFLOAT34 DECFLOAT(34)");
	}
	// Add the ntypes 

        buffer.append (",C_NCHAR_50         NCHAR(50)      ");
        buffer.append (",C_NVARCHAR_50      NVARCHAR(50)   ");
        if(areLobsSupported ())
        {
            buffer.append (",C_NCLOB         NCLOB      ");
	}
	if (areBooleansSupported()) {
	    buffer.append (",C_BOOLEAN       BOOLEAN      ");
	}
        buffer.append (")");
        initTable(statement_, RSMDTEST_GET, buffer.toString()); 
                try { 
          connection_.commit();    // for xa
        } catch (Exception e) {} 


                
        // Setup RSTEST_GET2 table. $E2
        buffer = new StringBuffer ();
        buffer.append (" (C_KEY VARCHAR(20)");
        buffer.append (",C_SMALLINT        SMALLINT      ");
        buffer.append (",C_INTEGER         INTEGER       ");
        buffer.append (",C_REAL            REAL          ");
        buffer.append (",C_FLOAT           FLOAT         ");
        buffer.append (",C_FLOAT_3         FLOAT(3)      ");
        buffer.append (",C_DOUBLE          DOUBLE        ");
        buffer.append (",C_DECIMAL_50      DECIMAL(5,0)  ");
        buffer.append (",C_DECIMAL_105     DECIMAL(10,5) ");
        buffer.append (",C_NUMERIC_50      NUMERIC(5,0)  ");
        buffer.append (",C_NUMERIC_105     NUMERIC(10,5) ");
        buffer.append (",C_CHAR_1          CHAR          ");
        buffer.append (",C_CHAR_50         CHAR(50)      ");
        buffer.append (",C_VARCHAR_50      VARCHAR(50)   ");
        buffer.append (",C_BINARY_1        CHAR FOR BIT DATA        ");
        buffer.append (",C_BINARY_20       CHAR(20)  FOR BIT DATA   ");
        buffer.append (",C_VARBINARY_20    VARCHAR(20) FOR BIT DATA ");
        buffer.append (",C_DATE            DATE          ");
        buffer.append (",C_TIME            TIME          ");
        buffer.append (",C_TIMESTAMP       TIMESTAMP     ");
        if(areLobsSupported ())
        {
            buffer.append (",C_BLOB         BLOB      ");
            buffer.append (",C_CLOB         CLOB      ");
            buffer.append (",C_DBCLOB       DBCLOB    ");
            buffer.append (",C_DATALINK     DATALINK(200)      ");
            buffer.append (",C_DISTINCT     " + COLLECTION + ".MONEY ");
        }
        if(areBigintsSupported())    // @B0A
            buffer.append(",C_BIGINT BIGINT");    // @B0A
	if (areDecfloatsSupported ()) { 
            buffer.append(",C_DECFLOAT16 DECFLOAT(16)");
            buffer.append(",C_DECFLOAT34 DECFLOAT(34)");
	}
	if (getRelease() >= JDTestDriver.RELEASE_V7R1M0) {
	    buffer.append (", C_XML              XML              ");
	}
        buffer.append (",C_NCHAR_50         NCHAR(50)      ");
        buffer.append (",C_NVARCHAR_50      NVARCHAR(50)   ");
        buffer.append (",C_NCLOB            NCLOB      ");
        buffer.append (")");
        initTable(statement_, RSMDTEST_GET2, buffer.toString()); 
        connection_.commit();    // for xa


        if(areLargeDecimalPrecisionsSupported())
        {
            // get a connection with 63 digit decimal precision and scale
            Connection connection = getConnection(getBaseURL() + ";maximum precision=63;maximum scale=63", 
                systemObject_.getUserId (), encryptedPassword_);
            Statement statement = connection.createStatement();
            // create an additional table with 63 digit decimal precision
            buffer = new StringBuffer();
            
            buffer.append(" (C_KEY          VARCHAR(20)   ");
            buffer.append(", C_NUMERIC_630  NUMERIC(63,0) ");
            buffer.append(", C_NUMERIC_632  NUMERIC(63,2) ");
            buffer.append(", C_NUMERIC_6331 NUMERIC(63,31)");
            buffer.append(", C_NUMERIC_6333 NUMERIC(63,33)");
            buffer.append(", C_NUMERIC_6363 NUMERIC(63,63)");
            buffer.append(", C_NUMERIC_310  NUMERIC(31,0) ");
            buffer.append(", C_NUMERIC_312  NUMERIC(31,2) ");
            buffer.append(", C_NUMERIC_3131 NUMERIC(31,31)");
            buffer.append(", C_DECIMAL_630  DECIMAL(63,0) ");
            buffer.append(", C_DECIMAL_632  DECIMAL(63,2) ");
            buffer.append(", C_DECIMAL_6331 DECIMAL(63,31)");
            buffer.append(", C_DECIMAL_6333 DECIMAL(63,33)");
            buffer.append(", C_DECIMAL_6363 DECIMAL(63,63)");
            buffer.append(", C_DECIMAL_310  DECIMAL(31,0) ");
            buffer.append(", C_DECIMAL_312  DECIMAL(31,2) ");
            buffer.append(", C_DECIMAL_3131 DECIMAL(31,31)");
            buffer.append(")");
            initTable(statement, RSMDTEST_GET_BIG_PRECISION, buffer.toString()); 
           connection.commit();
        }

    }



    /**
    Performs setup needed after running testcases.
    
    @exception Exception If an exception occurs.
    **/
    public void cleanup ()
    throws Exception
    {
	// 
	// Force gc to clean up open statement
	// 
	System.gc(); 

	      cleanupTable(statement_, RSMDTEST_GET);
        cleanupTable(statement_, RSMDTEST_GET2);

        if(areLargeDecimalPrecisionsSupported())         {
            cleanupTable(statement_,  RSMDTEST_GET_BIG_PRECISION);

        }

        if(areLobsSupported ()) {
          try {

        statement_.executeUpdate("DROP DISTINCT TYPE " + COLLECTION + ".MONEY");
      } catch (Exception e) {
        e.printStackTrace();
      }

        }
        connection_.commit();    // for xa

        statement_.close ();
        connection_.close ();
    }



    /**
     * Cleanup - - this does not run automatically - - it is called by
     * JDCleanup.
     */
    public static void dropCollections(Connection c)
    {
        dropCollection(c, COLLECTION);
    }



    /**
    Creates the testcases.
    **/
    public void createTestcases2 ()
    {
    	
    	if(TestDriverStatic.pause_)
 	    { 
 		  	try 
 		  	{						
 		  		systemObject_.connectService(AS400.DATABASE);
 			}
 	     	catch (AS400SecurityException e) 
 	     	{
 				e.printStackTrace();
 			} 
 	     	catch (IOException e) 
 	     	{
 	     	    e.printStackTrace();
 			}
 				 	 	   
 	     	try
 	     	{
 	     	    Job[] jobs = systemObject_.getJobs(AS400.DATABASE);
 	     	    System.out.println("Host Server job(s): ");

 	     	    	for(int i = 0 ; i< jobs.length; i++)
 	     	    	{   	    	
 	     	    		System.out.println(jobs[i]);
 	     	    	}    	    
 	     	 }
 	     	 catch(Exception exc){}
 	     	    
 	     	 try 
 	     	 {
 	     	    	System.out.println ("Toolbox is paused. Press ENTER to continue.");
 	     	    	System.in.read ();
 	     	 } 
 	     	 catch (Exception exc) {};   	   
 	   } 
 	   
    	
    	
        addTestcase (new JDRSMDGetCatalogName (systemObject_,
                                               namesAndVars_, runMode_, fileOutputStream_, 
                                               password_));

        addTestcase (new JDRSMDGetColumnClassName (systemObject_,
                                                   namesAndVars_, runMode_, fileOutputStream_, 
                                                   password_));

        addTestcase (new JDRSMDGetColumnCount (systemObject_,
                                               namesAndVars_, runMode_, fileOutputStream_, 
                                               password_));

        addTestcase (new JDRSMDGetColumnDisplaySize (systemObject_,
                                                     namesAndVars_, runMode_, fileOutputStream_, 
                                                     password_));

        addTestcase (new JDRSMDGetColumnLabel (systemObject_,
                                               namesAndVars_, runMode_, fileOutputStream_, 
                                               password_));

        addTestcase (new JDRSMDGetColumnName (systemObject_,
                                              namesAndVars_, runMode_, fileOutputStream_, 
                                              password_));

        addTestcase (new JDRSMDGetColumnType (systemObject_,
                                              namesAndVars_, runMode_, fileOutputStream_, 
                                              password_));

        addTestcase (new JDRSMDGetColumnTypeName (systemObject_,
                                                  namesAndVars_, runMode_, fileOutputStream_, 
                                                  password_));

        addTestcase (new JDRSMDGetPrecision (systemObject_,
                                             namesAndVars_, runMode_, fileOutputStream_, 
                                             password_));

        addTestcase (new JDRSMDGetScale (systemObject_,
                                         namesAndVars_, runMode_, fileOutputStream_, 
                                         password_));

        addTestcase (new JDRSMDGetSchemaName (systemObject_,
                                              namesAndVars_, runMode_, fileOutputStream_, 
                                              password_));

        addTestcase (new JDRSMDGetTableName (systemObject_,
                                             namesAndVars_, runMode_, fileOutputStream_, 
                                             password_));

        addTestcase (new JDRSMDIsAutoIncrement (systemObject_,
                                                namesAndVars_, runMode_, fileOutputStream_, 
                                                password_));

        addTestcase (new JDRSMDIsCaseSensitive (systemObject_,
                                                namesAndVars_, runMode_, fileOutputStream_, 
                                                password_));

        addTestcase (new JDRSMDIsCurrency (systemObject_,
                                           namesAndVars_, runMode_, fileOutputStream_, 
                                           password_));

        addTestcase (new JDRSMDIsDefinitelyWritable (systemObject_,
                                                     namesAndVars_, runMode_, fileOutputStream_, 
                                                     password_));

        addTestcase (new JDRSMDIsNullable (systemObject_,
                                           namesAndVars_, runMode_, fileOutputStream_, 
                                           password_));

        addTestcase (new JDRSMDIsReadOnly (systemObject_,
                                           namesAndVars_, runMode_, fileOutputStream_, 
                                           password_));

        addTestcase (new JDRSMDIsSearchable (systemObject_,
                                             namesAndVars_, runMode_, fileOutputStream_, 
                                             password_));

        addTestcase (new JDRSMDIsSigned (systemObject_,
                                         namesAndVars_, runMode_, fileOutputStream_, 
                                         password_));

        addTestcase (new JDRSMDIsWritable (systemObject_,
                                           namesAndVars_, runMode_, fileOutputStream_, 
                                           password_));

        addTestcase (new JDRSMDMisc (systemObject_,
                                     namesAndVars_, runMode_, fileOutputStream_, 
                                     password_));

        addTestcase (new JDRSMDWrapper (systemObject_,
                                     namesAndVars_, runMode_, fileOutputStream_, 
                                     password_));
    }

}




