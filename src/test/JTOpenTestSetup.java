///////////////////////////////////////////////////////////////////////////////
//
// JTOpen (IBM Toolbox for Java - OSS version)
//
// Filename:  JTOpenTestSetup
//
// The source code contained herein is licensed under the IBM Public License
// Version 1.0, which has been approved by the Open Source Initiative.
// Copyright (C) 1997-2023 International Business Machines Corporation and
// others.  All rights reserved.
//
///////////////////////////////////////////////////////////////////////////////

package test;

import java.io.*;
import java.net.URL;
import java.net.URLConnection;
import java.sql.*; 
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.Properties;

public class JTOpenTestSetup  {

 
    public static void main(String args[]) {


	try {

	    boolean sendShipped = true ; 
	    System.out.println("Usage:  java -cp JTOpen-test.jar test.JDTOpenTestSetup  ");
	    System.out.println("   Setup the testing environment for runnning JTOpen tests using JDRunit.");

	    System.out.println("Refreshing JTOpen-test.jar");
	    JTOpenTestRefreshJar.main(args);

	    // Make sure the directories exist
	    String[] directories = { "ini", "ct" };
	    for (int i = 0 ; i < directories.length; i++) {
		File dir = new File(directories[i]);
		if (! dir.exists()) {
		    dir.mkdir(); 
		} 
	    }

	    checkConfigFile("netrc.ini");
	    checkConfigFile("systems.ini"); 
	    checkConfigFile("notification.ini");
	    checkConfigFile("dropAuthority.ini");
	    checkConfigFile("runitxx8Sx.ini"); 

	    
	    checkJNDIJars(); 
	    
	    checkJTOpenJars(); 
	    
	    
	    
	    
	} catch (Exception e) {
        e.printStackTrace(); 
      }

    }



    private static void checkJTOpenJars() {
      String [] filenames = { "jars/fscontext.jar", "jars/providerutil.jar" }; 
      boolean fileNotFound = false; 
      for (int i = 0; i < filenames.length; i++) { 
         File file = new File(filenames[i]);
         if (!file.exists()) { 
           System.out.println("Warning: JNDI:"+filenames[i]+" does not exist"); 
           fileNotFound=true; 
         }
      }
      
      if (fileNotFound) { 
        System.out.println("Warning:  JNDI jars were not found:  "); 
        System.out.println("          Download  from https://download.oracle.com/otn-pub/java/jndi/1.2.1/fscontext-1_2-beta3.zip"); 
        System.out.println("          Place missing files as indicated above"); 
      }
      
    }



    private static void checkJNDIJars() {
      // TODO Auto-generated method stub
      
    }



    public static void checkConfigFile(String filename) throws Exception  {

	filename = "ini"+File.separator+filename; 
	File file = new File (filename);
	if (! file.exists()) {
		// Extract from the Jar file and note that it will need updated
	    System.out.println("WARNING:   "+filename+" does not exist");
	    filename = "ini/"+filename;
	    InputStream is = loadResource(filename);
	    if (is == null) {
		System.out.println("WARNING:  Unable to get model  "+filename+" from classpath");
	    } else {
		    // Make a copy of the model one 
		FileOutputStream fos = new FileOutputStream(file);
		byte [] buffer = new byte[4096]; 
		int bytesRead = is.read(buffer); 
		while (bytesRead >= 0) {
		    if (bytesRead > 0) {
			fos.write(buffer,0,bytesRead); 
		    }
		    bytesRead = is.read(buffer); 
		}
		fos.close();
		is.close();
		System.out.println("WARNING:  Created "+filename+" should be updated"); 

	    }

	} 

    } 

  /* Load a resource.  The default is to load from the filesystem, then load using the classloader */ 
  
  public static InputStream loadResource(String iniFile) throws FileNotFoundException {
      InputStream inputStream = null  ;
      File file = new File(iniFile); 
      if (file.exists()) { 
	  inputStream= 	new FileInputStream(iniFile);
      } else {
	  inputStream = JDRunit.class.getClassLoader().getResourceAsStream(iniFile);
      }
      return inputStream;
  }


}
