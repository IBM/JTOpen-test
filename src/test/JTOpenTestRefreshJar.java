///////////////////////////////////////////////////////////////////////////////
//
// JTOpen (IBM Toolbox for Java - OSS version)
//
// Filename:  JTOpenTestRefreshJar
//
// The source code contained herein is licensed under the IBM Public License
// Version 1.0, which has been approved by the Open Source Initiative.
// Copyright (C) 1997-2023 International Business Machines Corporation and
// others.  All rights reserved.
//
///////////////////////////////////////////////////////////////////////////////

package test;

import java.io.*;
import java.net.URL;
import java.net.URLConnection;
import java.sql.*; 
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.Properties;

public class JTOpenTestRefreshJar  {

    public static String releaseUrl = "https://api.github.com/repos/IBM/JTOpen-test/releases"; 


    public static String getDownloadUrl() throws Exception {
	String outUrl = null ;

	System.out.println("Fetching "+releaseUrl); 
	URL url = new URL(releaseUrl); 
	URLConnection connection = url.openConnection();

	connection.connect();
	StringBuffer sb = new StringBuffer(); 
	InputStream in = connection.getInputStream();
	byte[] buffer = new byte[4096];
	int bytesRead = in.read(buffer);
	while (bytesRead >= 0) {
	    if (bytesRead > 0) {
		sb.append(new String(buffer,0,bytesRead,"UTF-8")); 
	    }

	    bytesRead = in.read(buffer);
	} 

	String output = sb.toString();

	/* currently the releases are listed with the most recent first.  */
        /* Assume that is the case (so we don't have to parse all the json */ 
	int downloadIndex= output.indexOf("browser_download_url\"");
	if (downloadIndex > 0) {
	    int firstQuoteIndex = output.indexOf('"', downloadIndex + 21);
	    if (firstQuoteIndex > 0)  {
		int secondQuoteIndex = output.indexOf('"', firstQuoteIndex+1);
		if (secondQuoteIndex > 0) { 
		return output.substring(firstQuoteIndex+1,secondQuoteIndex);
		} else {
		    throw new Exception("second quote after browser_download_url not found in download from "+releaseUrl); 
		}

	    } else {
		throw new Exception("first quote after browser_download_url not found in download from "+releaseUrl); 
	    } 
	} else {
	    throw new Exception("browser_download_url not found in download from "+releaseUrl); 
	}

    } 

    public static String getBaseName(String url) throws Exception {
	int lastSlashIndex = url.lastIndexOf('/');
	if (lastSlashIndex > 0) {
	    return url.substring(lastSlashIndex+1); 
	} else {
	    throw new Exception("slash not found in URL "+url); 
	}

    } 


    public static void main(String args[]) {


	try {

	    boolean sendShipped = true ; 
	    System.out.println("Usage:  java test.JTOpenTestRefreshJar  ");
	    System.out.println("   Downloads the latest JTOpenTest release from github");


	    String downloadUrl = getDownloadUrl();
	    System.out.println(" Download URL is "+downloadUrl);

	    String basename = getBaseName(downloadUrl);

	    File baseFile = new File(basename);
	    if (!baseFile.exists()) { 
		fetchFile(".", basename, downloadUrl);
		copyFile(basename, "JTOpen-test.jar");
		System.out.println("Latest downloaded and copied to JTOpen-test.jar"); 
	    } else {
		System.out.println("Latest already downloaded"); 
	    } 

	    
	} catch (Exception e) {
        e.printStackTrace(); 
      }

    }







    public static void fetchFile(String destinationDirectory,
				 String fileName,
				 String urlPath) throws Exception {
      String destPath = destinationDirectory+"/"+fileName;
      try { 
	System.out.println("Fetching "+urlPath+ " to "+destPath); 
	URL url = new URL(urlPath); 
	URLConnection connection = url.openConnection();

	connection.connect();
	InputStream in = connection.getInputStream();
	FileOutputStream out = new FileOutputStream(destPath);

	byte[] buffer = new byte[65536]; 
	int bytesRead = in.read(buffer);
	while (bytesRead > 0) {
	    out.write(buffer,0,bytesRead); 
	    out.flush(); 
	    bytesRead = in.read(buffer);
	} 
	out.close();
	in.close(); 
      } catch (Exception e) { 
        System.out.println("Exception processing "+urlPath+" to "+destPath);
        e.printStackTrace(); 
      }




    }




    public static void copyFile(String sourceFile, String destFile) throws Exception {
      BufferedInputStream source = null;
      BufferedOutputStream destination = null;
      int bufSize = 2048;
        source =
          new BufferedInputStream (new FileInputStream (sourceFile), bufSize);
        destination =
          new BufferedOutputStream (new FileOutputStream (destFile), bufSize);
        byte[] buffer = new byte[bufSize];
        boolean done = false;
        while (!done)
        {
          int bytesRead = source.read (buffer);
          if (bytesRead == -1)
          {
            done = true;
            destination.flush ();
          }
          else destination.write (buffer, 0, bytesRead);
        }
	source.close();
	destination.close();
	System.out.println("Copied "+sourceFile+" to "+destFile); 
    } 




}
